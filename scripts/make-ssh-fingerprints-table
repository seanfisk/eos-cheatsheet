#!/usr/bin/env python

"""Generate a table of SSH fingerprints in reStructuredText for the EOS Lab
machines.
"""

import sys
import os
import argparse

import six
from fabric.api import env, execute, run
from fabric.network import disconnect_all
from texttable import Texttable

HOSTS = [
    'eos{0:02}.cis.gvsu.edu'.format(num) for num in xrange(1, 24)
] + [
    'arch{0:02}.cis.gvsu.edu'.format(num) for num in xrange(1, 11)
]

def get_fingerprint():
    """Retrieve the SSH fingerprint for a specific machine."""
    output = run(
        'ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub', shell=False)
    # The second element is the fingerprint.
    try:
        fingerprint = output.split()[1]
    except IndexError:
        raise ValueError('Unexpected format for remote output of ssh-keygen.')
    else:
        return fingerprint

def main(argv):
    # Parse args.
    arg_parser = argparse.ArgumentParser(
        prog=argv[0],
        description='Generate a table of SSH fingerprints in reStructuredText'
        ' for machines in the EOS and Arch Labs.')
    arg_parser.add_argument(
        'output_file', type=argparse.FileType('w'),
        help='output .rst file')
    args = arg_parser.parse_args(argv[1:])
    output_file = args.output_file

    # These settings can only be set through the environment, otherwise we'd be
    # passing it in through execute(...).

    # skip_bad_hosts and parallel are, unfortunately, mutually exclusive. Don't
    # see why they have to be, but that's the way it is.
    env.skip_bad_hosts = True
    # Use the SSH config file to determine username, etc.
    env.use_ssh_config = True

    # Generate table.
    try:
        results_dict = execute(get_fingerprint, hosts=HOSTS)
    finally:
        disconnect_all()

    table = Texttable()
    # The default decoration produces the correct table.
    table.header(['Host', 'Fingerprint'])

    for host, command_output in sorted(six.iteritems(results_dict)):
        # Use the short host name.
        short_hostname = host.split('.')[0]

        fingerprint_text = (
            # Indicate that the host is down in the table.
            'down for maintenance' if isinstance(command_output, Exception)
            # Use a fixed-width font for the fingerprint itself.
            else '``{0}``'.format(command_output))
        table.add_row((short_hostname, fingerprint_text))

    with output_file:
        six.print_(table.draw(), file=output_file)

    return 0

if __name__ == '__main__':
    raise SystemExit(main(sys.argv))
