#!/usr/bin/env python

"""Generate a table of VNC ports and geometries by parsing the ``vncts``
file.
"""

# pyPEG2 uses Unicode only.
from __future__ import unicode_literals

import sys
import os
import re
import argparse

import pypeg2 as peg
from texttable import Texttable

# PEG grammar

# This grammar isn't perfect and is somewhat restrictive, but it should handle
# the file as it is.

# Override symbol regex used for name() to include hyphen.
peg.Symbol.regex = re.compile(r'[\w-]+')

class Property(str):
    grammar = peg.name(), '=', peg.restline, peg.endl

class Service(peg.Namespace):
    grammar = (
        peg.Keyword('service'), peg.name(), '{', peg.maybe_some(Property), '}')

class ConfigFile(peg.List):
    grammar = peg.some(Service)

# The front part is just so that things like 'not-really-geometry' don't match.
# The end part is so that things like '1440x900abcd' don't match.
SERVER_ARGS_RE = re.compile(r'(?:^|\s)-geometry\s+(\d+x\d+)(?:$|\s)')
"""Regex used to parse server_args."""

def main(argv):
    # Parse args.
    arg_parser = argparse.ArgumentParser(
        prog=argv[0],
        description='Generate a table of VNC ports and geometries from a '
        "provided 'vncts' file.")
    arg_parser.add_argument(
        'input_file', type=argparse.FileType('r'),
        help='input vncts file')
    arg_parser.add_argument(
        'output_file', type=argparse.FileType('w'),
        help='output file')
    args = arg_parser.parse_args(argv[1:])
    input_file = args.input_file
    output_file = args.output_file

    # Parse the config file.
    with input_file:
        result = peg.parse(input_file.read(), ConfigFile)

    table = Texttable()
    # The default decoration produces the correct table.
    table.header(['Display', 'Port', 'Geometry'])

    for display, service in enumerate(result):
        try:
            server_args = service['server_args']
        except KeyError:
            raise ValueError(
                "Service '{0}' does not have a 'server_args' property!".format(
                    service.name))

        match = SERVER_ARGS_RE.search(server_args)
        if not match:
            raise ValueError(
                ("Service '{0}' does not contain a recognized "
                 "'-geometry WIDTHxHEIGHT' option!").format(service.name))

        geometry = match.group(1)
        port = 5900 + display
        table.add_row([display, port, geometry])

    with output_file:
        output_file.write(table.draw())

    return 0

if __name__ == '__main__':
    raise SystemExit(main(sys.argv))
