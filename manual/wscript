# -*- mode: python; coding: utf-8; -*-

import os
from os.path import join
import sys
from collections import OrderedDict

def options(ctx):
    pass

def configure(ctx):
    ctx.find_program('python')

def build(ctx):
    fingerprints_table_path = (
        'manual/remote-access/common/fingerprints/table.rst')
    vnc_table_path = (
        'manual/remote-access/common/vnc-port-geometry-table.rst')
    # The generated tables may or may not already exist. Since we are creating
    # a file in the source directory, it gets a little more complicated. Please
    # see here for the "solution":
    # <https://code.google.com/p/waf/issues/detail?id=1168>
    # That issue deals with exactly our problem here.
    fingerprints_table_node = (
        ctx.srcnode.find_node(fingerprints_table_path) or
        ctx.srcnode.make_node(fingerprints_table_path))
    vnc_table_node = (
        ctx.srcnode.find_node(vnc_table_path) or
        ctx.srcnode.make_node(vnc_table_path))

    extra_kwargs = {} if ctx.env.DEVELOPER_MODE else dict(always=True)

    fabfile_node = ctx.srcnode.find_resource('fabfile.py')
    hostnames_node = ctx.bldnode.find_or_declare('hostnames')

    # This task takes a while, so start it first.
    ctx(name='make_ssh_fingerprints_table',
        features='fabric',
        fabfile=fabfile_node,
        commands=OrderedDict([
            ('set_hosts', dict(hostfile=hostnames_node.abspath())),
            ('make_ssh_fingerprints_table', dict(
                output=fingerprints_table_node.abspath())),
        ]),
        source=[hostnames_node],
        target=[fingerprints_table_node],
        **extra_kwargs
    )

    vncts_node = ctx.path.find_or_declare('vncts')
    ctx(features='fabric',
        fabfile=fabfile_node,
        commands=dict(download_vncts_file=dict(output=vncts_node.abspath())),
        targret=[vncts_node],
        **extra_kwargs
    )

    parsers_dir = ctx.bldnode.find_dir('parsers')
    @ctx.rule(
        name='make_vnc_table',
        target=vnc_table_node,
        source=[vncts_node] + [
            # Depend on the generated parser files as well.
            parsers_dir.find_or_declare(['vnc_table_generator', base])
            for base in ctx.env.PARSER_FILES],
        vars=['PYTHON'],
        update_outputs=True)
    def make_vnc_table(tsk):
        # Note: colorama (from grako) has issues if we try to directly call
        # into the Python module from here.
        tsk.exec_command(
            [
                ctx.env.PYTHON,
                '-m', 'vnc_table_generator',
                tsk.inputs[0].abspath(),
                tsk.outputs[0].abspath(),
            ],
            # Add the module to the Python search path.
            env={'PYTHONPATH': parsers_dir.abspath()},
        )

    # TODO: The html document does not build under changes to
    # _templates/footer.html.
    ctx(features='sphinx',
        builders='latexpdf html man info',
        source='conf.py',
        # Turn warnings into errors. Helps them get fixed more quickly :)
        warningiserror=True,
        # Warn about all missing references.
        nitpicky=True,
        # Make sure that vnc and fingerprints tables are built before running.
        # The 'after' keyword means 'run this task after the listed tasks'.
        after_=['make_vnc_table', 'make_ssh_fingerprints_table'],
    )
