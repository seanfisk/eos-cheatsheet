# -*- mode: python; coding: utf-8; -*-

import os
from os.path import join
import sys

def options(ctx):
    # This option tells our build system not to always run operations which use
    # SSH to access EOS. Currently, this includes building the VNC and SSH
    # fingerprints tables. Users building on their machines should probably
    # disable auto-update, while automated builds leave auto-updated enabled.
    # The default is to auto-update because it is safer.
    ctx.add_option(
        # -m for Manual update
        '-m', '--no-ssh-auto-update',
        default=False, action='store_true',
    help='disable auto-update of ops requiring SSH')

def configure(ctx):
    scripts_dir = os.path.abspath('scripts')
    # Yay for double negatives!
    ctx.env.SSH_AUTO_UPDATE = not ctx.options.no_ssh_auto_update
    ctx.msg('Auto-update of SSH operations',
            'enabled' if ctx.env.SSH_AUTO_UPDATE else 'disabled',
            'GREEN' if ctx.env.SSH_AUTO_UPDATE else 'YELLOW')

def build(ctx):
    fingerprints_table_path = (
        'manual/remote-access/common/fingerprints/table.rst')
    vnc_table_path = (
        'manual/remote-access/common/vnc-port-geometry-table.rst')
    # The generated tables may or may not already exist. Since we are creating
    # a file in the source directory, it gets a little more complicated. Please
    # see here for the "solution":
    # <https://code.google.com/p/waf/issues/detail?id=1168>
    # That issue deals with exactly our problem here.
    fingerprints_table_node = (
        ctx.srcnode.find_node(fingerprints_table_path) or
        ctx.srcnode.make_node(fingerprints_table_path))
    vnc_table_node = (
        ctx.srcnode.find_node(vnc_table_path) or
        ctx.srcnode.make_node(vnc_table_path))

    ssh_task_gen_extra_kwargs = {}
    if ctx.env.SSH_AUTO_UPDATE:
        ssh_task_gen_extra_kwargs['always'] = True

    fabfile_node = ctx.srcnode.find_resource('fabfile.py')

    # This task takes a while, so start it first.
    ctx(name='make_ssh_fingerprints_table',
        features='fabric',
        fabfile=fabfile_node,
        command='make_ssh_fingerprints_table',
        args=dict(output=fingerprints_table_node.abspath()),
        target=[fingerprints_table_node],
        **ssh_task_gen_extra_kwargs
    )

    vncts_node = ctx.path.find_or_declare('vncts')
    ctx(features='fabric',
        fabfile=fabfile_node,
        command='download_vncts_file',
        args=dict(output=vncts_node.abspath()),
        target=[vncts_node],
        **ssh_task_gen_extra_kwargs
    )

    parsers_dir = ctx.bldnode.find_dir('parsers')
    @ctx.rule(
        name='make_vnc_table',
        target=vnc_table_node,
        source=[vncts_node] +
        # Make the parser nodes themselves inputs, so that when they
        # updates ensue regardless of the value of auto-update.
        parsers_dir.find_dir('vnc_table_generator').ant_glob(
            '*.py', quiet=True),
        update_outputs=True,
        vars=['PYTHON'])
    def make_vnc_table(tsk):
        return tsk.exec_command(
            [
                ctx.env.PYTHON,
                '-m', 'vnc_table_generator',
                tsk.inputs[0].abspath(),
                tsk.outputs[0].abspath(),
            ],
            # Set the PYTHONPATH so that the module can be found.
            env={'PYTHONPATH': parsers_dir.abspath()})

    # TODO: The html document does not build under changes to
    # _templates/footer.html.
    ctx(features='sphinx',
        builders='latexpdf html man info',
        source='conf.py',
        # Turn warnings into errors. Helps them get fixed more quickly :)
        warningiserror=True,
        # Warn about all missing references.
        nitpicky=True,
        # Make sure that vnc and fingerprints tables are built before running.
        # The 'after' keyword means 'run this task after the listed tasks'.
        after_=['make_vnc_table', 'make_ssh_fingerprints_table'],
    )
