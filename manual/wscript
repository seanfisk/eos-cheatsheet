# -*- mode: python; coding: utf-8; -*-

import os
from os.path import join
import sys
from collections import OrderedDict

import waflib

OPENERS = dict(
    opdf=('open_file', waflib.Context.g_module.APPNAME + '.pdf'),
    ohtml=('open_html_file', 'index.html'),
    oman=('open_manpage', 'eos.7'),
    oinfo=('open_info', 'eos.info'),
    oeinfo=('open_info_emacs', 'eos.info'),
)
SPHINX_TARGETS = ['pdf', 'html', 'man', 'info']

def _get_sphinx_builder(target):
    return 'latexpdf' if target == 'pdf' else target

def options(ctx):
    pass

def configure(ctx):
    ctx.find_program('python')

def build(ctx):
    if not any(map(ctx.should_build, SPHINX_TARGETS)):
        return

    fingerprints_table_path = (
        'manual/remote-access/common/fingerprints/table.rst')
    vnc_table_path = (
        'manual/remote-access/common/vnc-port-geometry-table.rst')
    fingerprints_table_node = ctx.find_or_make_in_src(fingerprints_table_path)
    vnc_table_node = ctx.find_or_make_in_src(vnc_table_path)
    ctx.env.SRC_DIR_BUILD_NODES += [fingerprints_table_node, vnc_table_node]

    extra_kwargs = {} if ctx.env.DEVELOPER_MODE else dict(always=True)

    fabfile_node = ctx.srcnode.find_resource('fabfile.py')
    hostnames_node = ctx.bldnode.find_or_declare('hostnames')

    # This task takes a while, so start it first.
    ctx(name='make_ssh_fingerprints_table',
        features='fabric',
        fabfile=fabfile_node,
        commands=OrderedDict([
            ('set_hosts', dict(hostfile=hostnames_node.abspath())),
            ('make_ssh_fingerprints_table', dict(
                output=fingerprints_table_node.abspath())),
        ]),
        source=[hostnames_node],
        target=[fingerprints_table_node],
        **extra_kwargs
    )

    vncts_node = ctx.path.find_or_declare('vncts')
    ctx(features='fabric',
        fabfile=fabfile_node,
        commands=dict(download_vncts_file=dict(output=vncts_node.abspath())),
        target=[vncts_node],
        **extra_kwargs
    )

    parsers_dir = ctx.bldnode.find_dir('parsers')
    @ctx.rule(
        name='make_vnc_table',
        target=vnc_table_node,
        # Depend on the generated parser files as well.
        source=[vncts_node] + ctx.env.PARSER_NODES['vnc_table_generator'],
        vars=['PYTHON'],
        update_outputs=True)
    def make_vnc_table(tsk):
        # Note: colorama (from grako) has issues if we try to directly call
        # into the Python module from here.
        return tsk.exec_command(
            ctx.env.PYTHON + [
                '-m', 'vnc_table_generator',
                tsk.inputs[0].abspath(),
                tsk.outputs[0].abspath(),
            ],
            # Add the module to the Python search path.
            env={'PYTHONPATH': parsers_dir.abspath()},
        )

    # TODO: The html document does not build under changes to
    # _templates/footer.html.
    ctx(features='sphinx',
        builders=map(_get_sphinx_builder, [ctx.env.SPECIFIC_TARGET]
                     if ctx.env.SPECIFIC_TARGET else SPHINX_TARGETS),
        source='conf.py',
        # Turn warnings into errors. Helps them get fixed more quickly :)
        warningiserror=True,
        # Warn about all missing references.
        nitpicky=True,
        # Make sure that vnc and fingerprints tables are built before running.
        # The 'after' keyword means 'run this task after the listed tasks'.
        after_=['make_vnc_table', 'make_ssh_fingerprints_table'],
    )

    if ctx.env.OPEN_SPECIFIC_TARGET:
        def _open_target(ctx):
            open_fn_name, node_basename = OPENERS[ctx.cmd]
            getattr(ctx, open_fn_name)(ctx.bldnode.find_node([
                'manual',
                _get_sphinx_builder(ctx.env.SPECIFIC_TARGET),
                node_basename]))
        ctx.add_post_fun(_open_target)
