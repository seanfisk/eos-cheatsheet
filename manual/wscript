# -*- mode: python; coding: utf-8; -*-

import os
from os.path import join
import sys

def options(ctx):
    # This option tells our build system not to always run operations which use
    # SSH to access EOS. Currently, this includes building the VNC and SSH
    # fingerprints tables. Users building on their machines should probably
    # disable auto-update, while automated builds leave auto-updated enabled.
    # The default is to auto-update because it is safer.
    ctx.add_option(
        # -m for Manual update
        '-m', '--no-ssh-auto-update',
        default=False, action='store_true',
    help='disable auto-update of ops requiring SSH')

def configure(ctx):
    scripts_dir = os.path.abspath('scripts')
    ctx.find_program('make-ssh-fingerprints-table',
                     var='MAKE_SSH_FINGERPRINTS_TABLE',
                     path_list=[scripts_dir])
    ctx.find_program('download-vncts-file',
                     var='DOWNLOAD_VNCTS_FILE',
                     path_list=[scripts_dir])
    ctx.find_program('make-vnc-table',
                     var='MAKE_VNC_TABLE',
                     path_list=[scripts_dir])
    # Yay for double negatives!
    ctx.env.SSH_AUTO_UPDATE = not ctx.options.no_ssh_auto_update
    ctx.msg('Auto-update of SSH operations',
            'enabled' if ctx.env.SSH_AUTO_UPDATE else 'disabled',
            'GREEN' if ctx.env.SSH_AUTO_UPDATE else 'YELLOW')

def build(ctx):
    fingerprints_table_path = (
        'manual/remote-access/common/fingerprints/table.rst')
    vnc_table_path = (
        'manual/remote-access/common/vnc-port-geometry-table.rst')
    # The generated tables may or may not already exist. Since we are creating
    # a file in the source directory, it gets a little more complicated. Please
    # see here for the "solution":
    # <https://code.google.com/p/waf/issues/detail?id=1168>
    # That issue deals with exactly our problem here.
    fingerprints_table_node = (
        ctx.srcnode.find_node(fingerprints_table_path) or
        ctx.srcnode.make_node(fingerprints_table_path))
    vnc_table_node = (
        ctx.srcnode.find_node(vnc_table_path) or
        ctx.srcnode.make_node(vnc_table_path))

    ssh_task_gen_extra_kwargs = {}
    if ctx.env.SSH_AUTO_UPDATE:
        ssh_task_gen_extra_kwargs['always'] = True

    # This task takes a while, so start it first.
    @ctx.rule(
        name='make-ssh-fingerprints-table',
        target=fingerprints_table_node,
        # Make the script itself an input, so that when it changes updates
        # ensue regardless of the value of auto-update.
        source=ctx.root.find_node(ctx.env.MAKE_SSH_FINGERPRINTS_TABLE),
        update_outputs=True,
        vars=['MAKE_SSH_FINGERPRINTS_TABLE'],
        **ssh_task_gen_extra_kwargs)
    def make_ssh_fingerprints_table(tsk):
        return tsk.exec_command(
            [ctx.env.MAKE_SSH_FINGERPRINTS_TABLE, tsk.outputs[0].abspath()],
            # Don't capture the standard streams is case we get prompts.
            stdout=sys.stdout,
            stderr=sys.stderr)

    vncts_node = ctx.path.find_or_declare('vncts')
    @ctx.rule(
        target=vncts_node,
        # Make the script itself an input, so that when it changes updates
        # ensue regardless of the value of auto-update.
        source=ctx.root.find_node(ctx.env.DOWNLOAD_VNCTS_FILE),
        vars=['DOWNLOAD_VNCTS_FILE'],
        **ssh_task_gen_extra_kwargs)
    def download_vncts_file(tsk):
        return tsk.exec_command(
            [ctx.env.DOWNLOAD_VNCTS_FILE, tsk.outputs[0].abspath()],
            # Don't capture the standard streams is case we get prompts.
            stdout=sys.stdout,
            stderr=sys.stderr)

    @ctx.rule(
        name='make-vnc-table',
        target=vnc_table_node,
        # Make the script itself an input, so that when it changes updates
        # ensue regardless of the value of auto-update.
        source=[vncts_node, ctx.root.find_node(ctx.env.MAKE_VNC_TABLE)],
        update_outputs=True,
        vars=['MAKE_VNC_TABLE'])
    def make_vnc_table(tsk):
        return tsk.exec_command([
            ctx.env.MAKE_VNC_TABLE,
            tsk.inputs[0].abspath(),
            tsk.outputs[0].abspath(),
        ])

    ctx(features='sphinx',
        builders='latexpdf html epub man info',
        source='conf.py',
        # Turn warnings into errors. Helps them get fixed more quickly :)
        warningiserror=True,
        # Warn about all missing references.
        nitpicky=True,
        # Make sure that vnc and fingerprints tables are built before running.
        # The 'after' keyword means 'run this task after the listed tasks'.
        after=['make-vnc-table', 'make-ssh-fingerprints-table'],
    )
